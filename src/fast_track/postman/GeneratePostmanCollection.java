package fast_track.postman;

import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import fast_track.APIEntry;
import fast_track.PreparedStatmentStruct;
import fast_track.APIEntry.Select;
import fast_track.PreparedStatmentStruct.MODE;
import fast_track.PreparedStatmentStruct.PreparedStatementItm;

/**
 * Servlet implementation class GeneratePostmanCollection
 * 
 */
@WebServlet("/GeneratePostmanCollection")
public class GeneratePostmanCollection extends HttpServlet 
{
	private static final long serialVersionUID = 1L;
	
	public static class PostmanCollection
	{
		Info 				info = new Info();
		Vector<ItmesGroup> 	item = new Vector<ItmesGroup>(); 
		

		public static class Info
		{
			public Info()
			{
			}
			
			public String _postman_id 	= "8362af06-229d-49e6-9f23-31338b94ec4e";
			public String name 			= "SVDP_AutoGenerated";
			public String schema		= "https://schema.getpostman.com/json/collection/v2.1.0/collection.json";
			public String _exporter_id	= "20978056";
		}
		
		public static class ItmesGroup
		{
			String 			name;
			Vector<Item> 	item;
			
			public ItmesGroup( String name )
			{
				this.name = name;
				this.item = new Vector<Item>();
			}
		}

		public static class Item
		{
			public static class Request
			{
				public static class Body
				{
					String 					mode 	=  "raw";
					String					raw 	= 	"";
					public Map<String, Map<String, String>>	options	= new HashMap<String, Map<String, String>>();

					public Body( String keyValues )
					{
						raw = keyValues;
						Map<String, String> raw = new HashMap<String, String>();
						raw.put( "language", "json" );
						options.put("raw", raw);
					}
				
				}
				
				public static class URL 
				{
					String 					raw 		= 	null;
					String 					protocol	=	null;
					String[] 				host		= 	null;//{ "tc", "svdp-help", "com" };
					String[]				path		= 	null;//{ "SVDP", "Voluntarios" };
					@SuppressWarnings("rawtypes")
					Map[]					query		= null;
					
					public URL( String url, String protocol, String[] host, String[] path )
					{
						this.raw 		= url;
						this.protocol 	= protocol;
						
						int indx1 = url.indexOf("?");
						
						this.host		= host;
						this.path		= path;
						
						if ( indx1 > 0 )
						{
							String 		que = url.substring(indx1+1);
							String[] 	spl = que.split( "&" );
							
							query		= new Map[1];
							
							Map<String, String> map = new HashMap<String, String>();
							
							query[0] 	= map;
							
							for ( String qi : spl )
							{
								String[] keyValue = qi.split( "=" );
								map.put( "key", keyValue[0] );
								map.put( "value", keyValue[1] );
							}

						}
						
					}
				}

				public String 							method 	= null;
				public String[] 						header	= new String[0];
				public Body								body	= null;
				public URL								url		= null;
				
				public Request( String rawUrl, String[] host, String[] path ,String protocol, String method, String keyValues  )
				{
					this.method = method;
					url		= new URL( rawUrl, protocol, host, path );
					
					if ( !method.equalsIgnoreCase("GET") )
					{
						body	= new Body( keyValues );
					}
				}
			}
			
			public Item( String name, String url, String[] host, String[] path ,String protocol, String method, String keyValues  )
			{
				this.name 		= name;
				this.request	= new Request( url, host, path, protocol, method, keyValues );
			}
			
			public String 	name 		= null;
			public Request 	request		= null;
			public String[] response	= new String[0];
		}
				
		/*
		private String addTokenIf( MODE mode, APIEntry	apiEntry )
		{
			Boolean doNotUseToken = false;
			
			switch ( mode )
			{
				case DELETE:
					doNotUseToken = apiEntry.delete.doNotUseToken ;
					break;
				case INSERT:
					doNotUseToken = apiEntry.insert.doNotUseToken;
					break;
				case OPTIONS:
					doNotUseToken = apiEntry.options.doNotUseToken;
					break;
				case SELECT:
					doNotUseToken = apiEntry.select.doNotUseToken;
					break;
				case UPDATE:
					doNotUseToken = apiEntry.update.doNotUseToken;
					break;
				default:
					doNotUseToken = false;
					break;
			}
			
			return doNotUseToken != null && doNotUseToken ?  "" : "\n\t\"Token\":\"*\",";
		}*/
		
		private int addTableBody( String parentTable, String mode, PreparedStatmentStruct pss, StringBuilder sb, int nestDeeep  )
		{
			if ( pss == null )
			{
				return 0;
			}

			if ( !parentTable.isEmpty() )
			{
				parentTable += ".";
			}
			
			APIEntry 						apiEntry 	= pss.getAPIEntry();
			ArrayList<PreparedStatementItm> psItems 	= pss.getPreparedStatementItms();
			MODE 							modeCont	= MODE.valueOf( mode );
			
			if ( mode.equalsIgnoreCase( "DELETE") )
			{
		    		sb.append('{').append('\n').
		    			//append( addTokenIf( modeCont, apiEntry ) ).
		    			append('\t').append('"').append( parentTable ).append(apiEntry.delete.delete_key).append('"').append(':').append( "\"\"" );
		    	

				return nestDeeep;
			}
			

			if ( sb.length() == 0 )
			{
				sb.append('{');//.append( addTokenIf( modeCont, apiEntry ) );
			}
			
			for ( PreparedStatementItm itm : psItems )
			{				
				if ( itm.type.equalsIgnoreCase("Token") )
				{
					continue;
				}
				
				
				if ( apiEntry.contains( modeCont, itm.name, false ) )
				{
					String value 	= itm.nullable ? "\"\"" : "\"*\"";
					String comment 	= " //" +  itm.type ;
					
					sb.append('\n').append('\t').append('"').append( parentTable ).append(itm.name).append('"').append(':').append( value ).append(',').append(comment);
				}
			}			
			
			if ( nestDeeep > 0 && apiEntry.foreingTables != null )
			{
				for ( APIEntry.ReferenceTable ft : apiEntry.foreingTables )
				{
					if ( ft.visible )
					{
						String key = ft.tablenName + "_" + mode;
						
						PreparedStatmentStruct pss2 = PreparedStatmentStruct.get(key);
		
						addTableBody( parentTable + ft.tablenName, mode, pss2, sb, nestDeeep-1 );
					}
				}
			}
			
			
			return nestDeeep;
		}
		
		
		public PostmanCollection( String serverName, String contextPath, String requestURL, String protocol )
		{
			Map<String, PreparedStatmentStruct> preparedStatmentStructMap 	= PreparedStatmentStruct.getPreparedStatmentStructMap();
			Hashtable<String,ItmesGroup> 		itemTable 					= new Hashtable<String,ItmesGroup>(); 

			Set<String> 		keySet 	= preparedStatmentStructMap.keySet();
			Iterator<String> 	iter 	= keySet.iterator();
						
			while (iter.hasNext()) 
			{
			    String key1 = iter.next();
			    
			    PreparedStatmentStruct pss = preparedStatmentStructMap.get( key1 );
			    
			    APIEntry 	apiEntry 	= pss.getAPIEntry();
			    String 		apiEntryURL = requestURL + "/" + apiEntry.apiEntryName;
			    
			    if ( key1.endsWith("SELECT"))
			    {
			    	String[] host		= { serverName };//{ "tc", "svdp-help", "com" };
					String[] path		= { contextPath, apiEntry.apiEntryName};
					
					Select select = apiEntry.select;
					
					String query = null;
							
					for ( String sk : select.select_keys )
					{
						query = query == null ? "?" + sk + "=like(*)" : query + "&" + sk + "=like(*)";
					}
					
			    	Item 		newItem 		= new Item( apiEntry.apiEntryName, apiEntryURL + query, host, path, protocol, "GET", "" ); 
			    	String 		apiEntryName 	= apiEntry.apiEntryName;
			    	ItmesGroup 	itmesGroup 		= itemTable.get(apiEntryName);
			    	
			    	if ( itmesGroup == null )
			    	{
			    		itmesGroup = new ItmesGroup( apiEntryName );
			    	 
			    		itemTable.put( apiEntryName, itmesGroup );
			    	}
			    	
			    	itmesGroup.item.add( newItem );
			    }
			    else
			    {
			    	String method 	= null;
			    	String mode		= null;
			    	
			    	int nestDeeep = apiEntry.neestDeep;
			    	
			    	if ( key1.endsWith("INSERT"))
			    	{
			    		method 		= "POST";
			    		mode 		= MODE.INSERT.toString();
			    	}
			    	else if ( key1.endsWith("UPDATE"))
			    	{
			    		method 		= "PUT";
			    		mode 		= MODE.UPDATE.toString();
			    	}
			    	else if ( key1.endsWith("DELETE"))
			    	{
			    		method 		= "DELETE";
			    		mode 		= MODE.DELETE.toString();
			    		nestDeeep 	= 0;
			    	}
			    	else if ( key1.endsWith("OPTIONS"))
			    	{
			    		method 		= "OPTIONS";
			    		mode 		= MODE.OPTIONS.toString();
			    		nestDeeep 	= 0;
			    	}
			    	
			    	
			    	if ( method != null )
			    	{
				    	String[] host		= { serverName };//{ "tc", "svdp-help", "com" };
						String[] path		= { contextPath, apiEntry.apiEntryName};
											
						String keyValues = null;//"{\r\n    \"key1\":\"value1\",\r\n    \"key2\":\"value2\"\r\n}";
						
						StringBuilder sb = new StringBuilder();
												
						addTableBody( "",  mode, pss, sb, nestDeeep );
						
						int lastComma = sb.lastIndexOf(", ");
						
						if ( lastComma != -1 )
						{
							sb.deleteCharAt(lastComma);
						}
						
						sb.append( '\n' ).append( '}' );
						
						keyValues = sb.toString();
								
				    	Item newItem = new Item( apiEntry.apiEntryName, apiEntryURL, host, path, protocol, method, keyValues ); 

				    	String apiEntryName = apiEntry.apiEntryName;
				    	
				    	ItmesGroup 	itmesGroup 		= itemTable.get(apiEntryName);
				    	
				    	if ( itmesGroup == null )
				    	{
				    		itmesGroup = new ItmesGroup( apiEntryName );
				    	 
				    		itemTable.put(apiEntryName, itmesGroup);
				    	}
				    	
				    	itmesGroup.item.add( newItem );
			    	}
			    		
			    }			    
			}
			
			Enumeration<String> keys = itemTable.keys();
			
			while ( keys.hasMoreElements() )
			{
				item.add( itemTable.get(keys.nextElement() ) );
			}
		}
				
	}
	
    /**
     * @see HttpServlet#HttpServlet()
     */
    public GeneratePostmanCollection() 
    {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException 
	{
		String contextPath 	= request.getContextPath();
		String requestURL 	= request.getRequestURL().toString();
		String serverName 	= request.getServerName();
		String protocol		= "https";
		
		if ( serverName.equalsIgnoreCase("localhost" ) )
		{
			serverName = serverName + ":8080";
			protocol = "http";
		}
		
		int idx = requestURL.indexOf( contextPath );
				
		PostmanCollection pc = new PostmanCollection( serverName, contextPath.substring( 1 ), requestURL.substring( 0, idx ) + contextPath, protocol );
		
	    response.setContentType("application/json");
	    response.setCharacterEncoding("UTF-8");

		Gson 				gson 	= new GsonBuilder().disableHtmlEscaping().setPrettyPrinting().create();
		OutputStreamWriter 	osw 	= new OutputStreamWriter (response.getOutputStream(), Charset.forName("UTF-8").newEncoder()  );

		gson.toJson( pc, osw );

		osw.flush();
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException 
	{
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
